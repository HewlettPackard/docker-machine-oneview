# Quick test. You can bypass long tests using: `if testing.Short() { t.Skip("Skipping in short mode.") }`
TESTCONFIG_PACKAGE_ROOT_PATH := github.com/$(GH_USER)/$(GH_REPO)
TESTCONFIG_JSON_DATA_DIR := test/data
ONEVIEW_TEST_DATA=EGSL_HOUS200_LAB

test-short:
	TESTCONFIG_PACKAGE_ROOT_PATH=$(TESTCONFIG_PACKAGE_ROOT_PATH) \
	TESTCONFIG_JSON_DATA_DIR=$(TESTCONFIG_JSON_DATA_DIR) \
	ONEVIEW_TEST_DATA=$(ONEVIEW_TEST_DATA) \
	$(GO) test $(VERBOSE_GO) -test.short -tags "$(BUILDTAGS)" $(PKGS)

# Runs long tests also, plus race detection
test-long:
	TESTCONFIG_PACKAGE_ROOT_PATH=$(TESTCONFIG_PACKAGE_ROOT_PATH) \
	TESTCONFIG_JSON_DATA_DIR=$(TESTCONFIG_JSON_DATA_DIR) \
	ONEVIEW_TEST_DATA=$(ONEVIEW_TEST_DATA) \
	$(GO) test $(VERBOSE_GO) -race -tags "$(BUILDTAGS)" $(PKGS)

test-integration:
	TESTCONFIG_PACKAGE_ROOT_PATH=$(TESTCONFIG_PACKAGE_ROOT_PATH)
	TESTCONFIG_JSON_DATA_DIR=$(TESTCONFIG_JSON_DATA_DIR)
	ONEVIEW_TEST_DATA=$(ONEVIEW_TEST_DATA)
	$(eval TESTSUITE=$(filter-out $@,$(MAKECMDGOALS)))
	test/integration/run-bats.sh $(TESTSUITE)

%:
	@:
